@tailwind base;
@tailwind components;
@tailwind utilities;

/* Contact CSS Button */
@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

.bg-button {
  --c: #ffb400;
  --_g: linear-gradient(var(--c) 0 0) no-repeat;
  background: var(--_g) calc(var(--_p, 0%) - 100%) 0%,
    var(--_g) calc(200% - var(--_p, 0%)) 0%,
    var(--_g) calc(var(--_p, 0%) - 100%) 100%,
    var(--_g) calc(200% - var(--_p, 0%)) 100%;
  background-size: 50.5% calc(var(--_p, 0%) / 2 + 0.5%);
  outline-offset: 0.1em;
  transition: background-size 0.4s, background-position 0s 0.4s;
}
.bg-button:hover {
  --_p: 100%;
  transition: background-position 0.4s, background-size 0s;
}

.button {
  position: relative;
  border: none;
  background-color: transparent;
  cursor: pointer;
  outline: none;
  font-size: 18px;
  padding: 0.75rem;
}

.button.type1::after,
.button.type1::before {
  content: '';
  display: block;
  position: absolute;
  width: 25%;
  height: 25%;
  border: 2px solid;
  transition: all 0.5s ease;
  border-radius: 2px;
}

.button.type1::after {
  bottom: 0;
  right: 0;
  border-top-color: transparent;
  border-left-color: transparent;
  border-bottom-color: #ffb400; /* Using CSS variable */
  border-right-color: #ffb400;
}

.button.type1::before {
  top: 0;
  left: 0;
  border-bottom-color: transparent;
  border-right-color: transparent;
  border-top-color: #ffb400;
  border-left-color: #ffb400;
}

.button.type1:hover::after,
.button.type1:hover::before {
  width: 110%;
  height: 110%;
}

#typewriter {
  display: inline-block;
}

.cursor {
  animation: blink 1s infinite;
}

strong {
  color: #ffb400;
}

@keyframes blink {
  0%, 100% {
      opacity: 1;
  }
  50% {
      opacity: 0;
  }
}

/* Underline CSS Animation */
.underline {
  color: #ffb400;
  position: relative;
  text-decoration: none;
}

.underline::before {
  content: "";
  position: absolute;
  width: 100%;
  height: 2px;
  border-radius: 2px;
  background-color: #ffb400;
  bottom: 0;
  left: 0;
  transform-origin: right;
  transform: scaleX(0);
  transition: transform 0.3s ease-in-out;
}

.underline:hover::before {
  transform-origin: left;
  transform: scaleX(1);
}

/* Shine CSS Animation */
.btn-shine {
  transform: translate(-50%, -50%);
  color: #ffffff;
  background: linear-gradient(to right, #ffb400 0%, white 10%, #ffb400 20%);
  background-size: 200% 100%;
  background-position: 0;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: shine 2s infinite linear;
  animation-fill-mode: forwards;
  -webkit-text-size-adjust: none;
  text-decoration: none;
  white-space: nowrap;
}

@keyframes shine {
  0% {
    background-position: 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* Arrow to Scroll CSS Button */
.arrow {
  transform: translate(-50%, -50%);
  transform: rotate(00deg);
  cursor: pointer;
}

.arrow span {
  display: block;
  width: 1.5rem;
  height: 1.5rem;
  border-bottom: 5px solid #ffb400;
  border-right: 5px solid #ffb400;
  transform: rotate(45deg);
  margin: -10px;
  animation: animate 2s infinite;
}

.arrow span:nth-child(2) {
  animation-delay: -0.2s;
}

.arrow span:nth-child(3) {
  animation-delay: -0.4s;
}

@keyframes animate {
  0% {
    opacity: 0;
    transform: rotate(45deg) translate(-20px, -20px);
  }
  50% {
    opacity: 1;
  }
  100% {
    opacity: 0;
    transform: rotate(45deg) translate(20px, 20px);
  }
}

.scroll-downs {
  width :34px;
  height: 55px;
}
.mousey {
  width: 3px;
  padding: 10px 15px;
  height: 35px;
  border: 2px solid #ffb400;
  border-radius: 25px;
  opacity: 0.75;
  box-sizing: content-box;
}
.scroller {
  width: 3px;
  height: 10px;
  border-radius: 25%;
  background-color: #ffb400;
  animation-name: scroll;
  animation-duration: 2.2s;
  animation-timing-function: cubic-bezier(.15,.41,.69,.94);
  animation-iteration-count: infinite;
}
@keyframes scroll {
  0% { opacity: 0; }
  10% { transform: translateY(0); opacity: 1; }
  100% { transform: translateY(15px); opacity: 0;}
}

@property --angle {
  syntax: '<angle>';
  initial-value: 90deg;
  inherits: true;
}

@property --gradX {
  syntax: '<percentage>';
  initial-value: 50%;
  inherits: true;
}

@property --gradY {
  syntax: '<percentage>';
  initial-value: 0%;
  inherits: true;
}

:root {
	--d: 5000ms;
	--angle: 90deg;
	--gradX: 100%;
	--gradY: 50%;
	--c1: rgb(247, 202, 0);
	--c2: #a8efff1a;
}

.wrapper {
	min-width: min(40rem, 100%);
}

.box {
	border: 0.1rem solid;
	border-image: conic-gradient(from var(--angle), var(--c2), var(--c1) 0.1turn, var(--c1) 0.15turn, var(--c2) 0.25turn) 30;
	animation: borderRotate var(--d) linear infinite forwards;
}

@keyframes borderRotate {
	100% {
		--angle: 420deg;
	}
}

@keyframes borderRadial {
	20% {
		--gradX: 100%;
		--gradY: 50%;
	}
	40% {
		--gradX: 100%;
		--gradY: 100%;
	}
	60% {
		--gradX: 50%;
		--gradY: 100%;
	}
	80% {
		--gradX: 0%;
		--gradY: 50%;
	}
	100% {
		--gradX: 50%;
		--gradY: 0%;
	}
}